<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>筱·晓</title>
  
  <subtitle>桐花半亩，静锁一庭愁雨。</subtitle>
  <link href="https://niko-karen.github.io/atom.xml" rel="self"/>
  
  <link href="https://niko-karen.github.io/"/>
  <updated>2022-01-19T01:03:24.785Z</updated>
  <id>https://niko-karen.github.io/</id>
  
  <author>
    <name>Niko</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>说说Linux</title>
    <link href="https://niko-karen.github.io/article/4ed560a5/"/>
    <id>https://niko-karen.github.io/article/4ed560a5/</id>
    <published>2022-01-18T03:17:51.000Z</published>
    <updated>2022-01-19T01:03:24.785Z</updated>
    
    <content type="html"><![CDATA[<div class="note red icon simple"><i class="note-icon fas fa-exclamation-triangle"></i><p>本文会有很多主观意识的<del>暴力语言</del>，如有不适，请吐槽，本人尽快更改。</p></div><p>我用Linux也有很长时间了，有近三年了。在我9岁的时候，我第一次接触电脑就是用Ubuntu 18.04 LTS，当时图形界面已经很好看了，以至于现在我家的那台古董电脑还运行着Lubuntu 18.04 LTS (Ubuntu的分支版，LXDE桌面)。</p><h2 id="个人Linux使用史-主观"><a href="#个人Linux使用史-主观" class="headerlink" title="个人Linux使用史 { 主观 }"></a>个人Linux使用史 { 主观 }</h2><h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><p>那时我正在上网查资料，觉得Win7很丑、跟不上时代了，就想换个系统。当时在我们普通人眼中，只有一种系统:Windows，所以当时一搜 “重装系统” 就满屏是Windows的重装教程(我还不会自己重装)。</p><p>我特无奈:”我的电脑装Win7已经有些撑不住了，还能来个Win8.1 ?Win10 ?”所以我再搜:”除Windows外的开源系统”，就出来个Linux,Unix。<br>“甚么是Linux? 甚么是Unix” 带着疑问，就尝试学习装了个最简单的Ubuntu。<psw>差点就装上了Arch，装成了我估计要成仙。😅</psw></p><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><p>自从我发现Linux这个大宝藏，就沉迷于此不可自拔，不停换系统:Ubuntu,Debian,Fedora,Centos……甚至Arch都装上了。但有个大毛病，就是我装上后总嫌不好看，不停美化，把系统速度拉低又拉低，但好处既是我的命令行越来越熟，越来越快。</p><h3 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h3><p>到了这个阶段，我可以自建Git服务器、博客服务器，运用git等工具……巴拉巴拉很多技能都学习到了。其中激励我的大概都是我对计算机的热爱和痴迷，有了这些我才能步步高升，登上计算机的殿堂。</p><h2 id="Linux-发展史-客观"><a href="#Linux-发展史-客观" class="headerlink" title="Linux 发展史 { 客观 }"></a>Linux 发展史 { 客观 }</h2><p>我对以前的Linux版本不熟，我主要了解的是内核版本4.5+至5.0+，平时使用的，也就这几个，曾经也自己编译内核自制小系统，叫<mark class="hl-label orange">SimLinux</mark> ，意思就是简单的Linux，功能也简单。就只有个Bash。</p><div class="note purple icon simple"><i class="note-icon fab fa-linux"></i><p>本人要不下次写个<mark class="hl-label blue">自己编译、制作Linux发行版教程</mark> ? 大家众议。</p></div><p>跑题了，回到正题。</p><h3 id="2018-1"><a href="#2018-1" class="headerlink" title="2018"></a>2018</h3><p>2018年的Linux已经非常不错了，当时的图形界面(除了图标)和现在竟没啥大变化。 <psw>如果你美化了当我没说。</psw></p><p>下面这玩意2G内存装Gnome挺神奇的，我也是2G内存，但装上Gnome就是PPT😑<br><img src="debian2018.webp" alt="2018的Debian"></p><h3 id="2019-1"><a href="#2019-1" class="headerlink" title="2019"></a>2019</h3><p>2019 图形界面较2018进步了点，尤其是图标进步很大，更有后起之秀<strong>Zorin OS</strong>，又漂亮又方便，制作者是两名爱尔兰的青少年。</p><p><img src="zorin.webp" alt="Zorin OS"></p><h3 id="2020-1"><a href="#2020-1" class="headerlink" title="2020"></a>2020</h3><p>2020的Linux没啥大变化，但美化下还是很不错的，我觉得吧，Linux用于服务器等商业方面就好，在个人发行版上还不够成熟，几乎每个人拿到Linux后都是直接美化，浪费时间，不太好的习惯，建议改正。</p><p><img src="fedora.webp" alt="Fedora Gnome"></p><h2 id="BALABALA"><a href="#BALABALA" class="headerlink" title="BALABALA"></a>BALABALA</h2><p>我对Linux这个系统还是充满希望的，我也挺喜欢这个企鹅，和那个<del>文明有礼</del>的Linus。最后，祝Linux越来越好！<br><img src="linus-nvidia.webp" alt="Linus的咆哮"><br><img src="tux.webp" alt="Tux持枪"></p>]]></content>
    
    
    <summary type="html">自己对Linux的看法，很主观</summary>
    
    
    
    <category term="Linux 日常玩废" scheme="https://niko-karen.github.io/categories/Linux-%E6%97%A5%E5%B8%B8%E7%8E%A9%E5%BA%9F/"/>
    
    
    <category term="Linux 系统" scheme="https://niko-karen.github.io/tags/Linux-%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="评价" scheme="https://niko-karen.github.io/tags/%E8%AF%84%E4%BB%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python-Requests</title>
    <link href="https://niko-karen.github.io/article/e9ee3cf1/"/>
    <id>https://niko-karen.github.io/article/e9ee3cf1/</id>
    <published>2022-01-17T12:00:03.000Z</published>
    <updated>2022-01-19T01:07:19.536Z</updated>
    
    <content type="html"><![CDATA[<div class="note red icon simple"><i class="note-icon fas fa-language"></i><p>本教程使用Python语言，需提前安装Pip3 or Pip，例如Linux类的，请在命令行内输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="tabs" id="安装"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#安装-1">Linux</button></li><li class="tab"><button type="button" data-href="#安装-2">Windows</button></li><li class="tab"><button type="button" data-href="#安装-3">Macos</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="安装-1"><p>一条命令(临时换源):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install requests -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="安装-2"><p>Pypi包源官网: <a href="https://pypi.org/project/requests/">Requests</a><br><img src="pypi.webp" alt="大概是这样的"><br>在这可以看到有关这个第三方库的一切。</p><p>另一个就是PIP命令行安装，很简单，一条命令。</p><div class="note purple icon simple"><i class="note-icon fas fa-info"></i><p>由于包源在国外，所以访问速度感人，可以先Pip换源，再试。(后面说)</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>加速(阿里云): </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="安装-3"><p><strong>本人无钱购买Mac，所以没有钞能力去完成这个教程，各位有钱人施舍施舍？</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基础-Get请求"><a href="#基础-Get请求" class="headerlink" title="基础{Get请求}"></a>基础{Get请求}</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span></span><br><span class="line">&#125;  <span class="comment"># 向服务器传递的数据</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://bing.com&#x27;</span>,data=data).text <span class="comment"># text函数:获取对应网址的源代码</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p>User-Agent就像是<strong>浏览器的身份证</strong>,如果是Requests默认的ua的话，对应服务器会拒绝你的<strong>爬虫</strong>请求，简而言之，拿不到数据。</p><p><img src="demo1.webp" alt="就在这拿User-Agent"></p><h3 id="进阶-Post请求"><a href="#进阶-Post请求" class="headerlink" title="进阶 {Post请求}"></a>进阶 {Post请求}</h3><p><img src="demo2.webp" alt="官网教程"></p><ol><li>带数据的 post</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">host = <span class="string">&quot;http://httpbin.org/&quot;</span></span><br><span class="line">endpoint = <span class="string">&quot;post&quot;</span></span><br><span class="line">url = <span class="string">&#x27;&#x27;</span>.join([host,endpoint])</span><br><span class="line">data = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">r = requests.post(url,data=data)</span><br><span class="line"><span class="comment">#response = r.json()</span></span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br></pre></td></tr></table></figure><ol><li>多文件上传</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">host = <span class="string">&quot;http://httpbin.org/&quot;</span></span><br><span class="line">endpoint = <span class="string">&quot;post&quot;</span></span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;&#x27;</span>.join([host,endpoint])</span><br><span class="line"><span class="comment">#多文件上传</span></span><br><span class="line">files = [</span><br><span class="line">    (<span class="string">&#x27;file1&#x27;</span>,(<span class="string">&#x27;test.txt&#x27;</span>,<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))),</span><br><span class="line">    (<span class="string">&#x27;file2&#x27;</span>, (<span class="string">&#x27;test.png&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;test.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)))</span><br><span class="line">    ]</span><br><span class="line"> </span><br><span class="line">r = requests.post(url,files=files)</span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br></pre></td></tr></table></figure><h3 id="冷门-Put-请求"><a href="#冷门-Put-请求" class="headerlink" title="冷门 {Put 请求}"></a>冷门 {Put 请求}</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url_put = <span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line">headers_put = &#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">param = &#123;</span><br><span class="line"><span class="string">&#x27;myObjectField&#x27;</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">payload = json.dumps(param)</span><br><span class="line">response_put = requests.put(url, data=payload, headers=headers_put)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这库是真的好用，方便。比Python标准库urllib好N倍不止，平时爬虫爬个电影数据就好，不要太过分。</p>]]></content>
    
    
    <summary type="html">Python 第三方网络请求库</summary>
    
    
    
    <category term="Python" scheme="https://niko-karen.github.io/categories/Python/"/>
    
    
    <category term="编程" scheme="https://niko-karen.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Windows11 美化+优化教程</title>
    <link href="https://niko-karen.github.io/article/cce073e6/"/>
    <id>https://niko-karen.github.io/article/cce073e6/</id>
    <published>2022-01-17T02:14:30.000Z</published>
    <updated>2022-01-19T01:08:06.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跟微软的姻缘"><a href="#跟微软的姻缘" class="headerlink" title="跟微软的姻缘"></a>跟微软的姻缘</h2><p>事情回到两年前，那时我刚放暑假，如疯狗般把作业写完后，百无聊赖，就打开电脑玩。<br>上网看了看新闻后，感觉有点无趣: 上哪个网站都要登录，没账号、没邮箱寸步难行啊！</p><p>就去注册个邮箱吧！心里想着。到处找地址，搜百度。但几乎没有哪个邮箱注册是不需要手机号的，而我就缺这玩意！<br>咋办？接着找呗。最后，我找了<a href="https://outlook.com">Outlook</a>，不用手机号！真香！</p><p>就这样，跟微软扯上关系了呗(谁叫Gmail需要翻墙的……那时我还不知道VPN是什么 😑)</p><h2 id="回到正题"><a href="#回到正题" class="headerlink" title="回到正题"></a>回到正题</h2><p>不扯那么远。回到咱们主题: <mark class="hl-label purple">Windows11美化+优化教程</mark> </p><p>注意，是<strong>Windows 11</strong>。禁止Windows 10仿Win11入内！</p><hr><p>先给大家展示下我桌面哈<br><img src="mydesktop.webp" alt="我的桌面"></p><h3 id="透明化任务栏"><a href="#透明化任务栏" class="headerlink" title="透明化任务栏"></a>透明化任务栏</h3><p>目前Windows虽然支持透明化，但还不够，还是太模糊了。我们要完美，完美！{来自处女座的咆哮}</p><div class="tabs" id="透明化方法"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#透明化方法-1">透明化方法 1</button></li><li class="tab active"><button type="button" data-href="#透明化方法-2">透明化方法 2</button></li><li class="tab"><button type="button" data-href="#透明化方法-3">透明化方法 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="透明化方法-1"><h4 id="死磕在Windows设置里"><a href="#死磕在Windows设置里" class="headerlink" title="死磕在Windows设置里"></a>死磕在Windows设置里</h4><ol><li>打开设置 -&gt; 辅助功能 -&gt; 视觉效果</li><li>勾选<strong>透明效果</strong>，(好像装系统就自动勾了…)<br>Effect: 任务栏只有50%透明，<strong>不推荐</strong></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="透明化方法-2"><h4 id="使用软件：TranslucentTB"><a href="#使用软件：TranslucentTB" class="headerlink" title="使用软件：TranslucentTB"></a>使用软件：TranslucentTB</h4><p>优点：比另一个重点，但样式多。<br>缺点：好处说了，太重了。</p><div class="tabs" id="使用方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#使用方法-1">使用方法 1</button></li><li class="tab"><button type="button" data-href="#使用方法-2">使用方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="使用方法-1"><h5 id="在应用商店里下载"><a href="#在应用商店里下载" class="headerlink" title="在应用商店里下载"></a>在应用商店里下载</h5><p>打开应用商店，搜索<strong>TranslucentTB</strong>,安装、下载，免费送货上门<br><img src="store.webp" alt="应用商店(汉化的)"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="使用方法-2"><h5 id="上官网下载"><a href="#上官网下载" class="headerlink" title="上官网下载"></a>上官网下载</h5><p>提供网址: </p><ol><li><a href="https://github.com/TranslucentTB/TranslucentTB">Github网址</a></li><li><a href="https://pc.qq.com/detail/0/detail_24860.html">腾讯软件管家</a></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="透明化方法-3"><p><h4 id="使用软件：Startisback"><a href="#使用软件：Startisback" class="headerlink" title="使用软件：Startisback"></a>使用软件：Startisback</h4><p>官网：<a class="btn-beautify button--animated " href="https://startisback.com/"   title="Startisback"><i class="outline"></i><span>Startisback</span></a></p></p><p><ol></p><p><li>下载 <strong>Free Trial</strong>版，即免费版，足够了。</li></p><p><li>下载解压后，以<strong>管理员身份运行</strong>，安装。</li></p><p><li>打开控制面板</li></p><p><li>将右上角的【查看方式】修改为【大图标】，在下面点击【开始菜单】</li></p><p><li>点击左侧的【外观】，在右侧勾选【使用自定义任务栏颜色】，然后在右侧将颜色的滑动块移动到最左边，点击应用 — 确定</li></p><p><li>打开任务管理器</li></p><p><li>重启<strong>任务管理器</strong></li><br>&lt;/ol&gt;</p><p><p>All Done!<br></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h3 id="Dism-优化"><a href="#Dism-优化" class="headerlink" title="Dism++优化"></a>Dism++优化</h3><blockquote><p>美化易上头，一上头就把持不住。尽早跳出坑来，让其他人跳进去。嘻嘻~</p></blockquote><a class="btn-beautify button--animated " href="https://dl.softmgr.qq.com/original/System/Dism10.1.1001.10.zip"   title="下载"><i class="outline"></i><span>下载</span></a><p>下载解压后，选择自己系统版本，打开对应的Dism++ EXE，尽自己所能优化，不会别动就行。</p><h3 id="不断探索"><a href="#不断探索" class="headerlink" title="不断探索"></a>不断探索</h3><p>博主能力有限，也就一小学生，也就只能写这些了，有疑问或需求请在评论区提出，本人将加速更新。BiuBiu~</p><p><img src="learn.webp" alt="晒晒Microsoft Learn账号"></p>]]></content>
    
    
    <summary type="html">把自己的Windows搞机经历拿出来</summary>
    
    
    
    <category term="Windows 日常折腾" scheme="https://niko-karen.github.io/categories/Windows-%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Windows 系统" scheme="https://niko-karen.github.io/tags/Windows-%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>New Product -- 网易云下载播放器</title>
    <link href="https://niko-karen.github.io/article/759379402/"/>
    <id>https://niko-karen.github.io/article/759379402/</id>
    <published>2022-01-10T06:54:31.000Z</published>
    <updated>2022-01-19T01:20:32.129Z</updated>
    
    <content type="html"><![CDATA[<p>昨天翻了下写过的博文，其中有一篇是写<a href="http://localhost:4000/posts/2118472832/" title="文章">网易云直链</a>的，看着看着，一个邪恶的想法油然而生……<br><span id="more"></span></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1344438011&auto=1&height=66"></iframe><blockquote><p>“为何不做一个集合音乐下载和播放的小程序呢？以我的能力完全可以的啊！搞他。”</p><footer><strong>Niko</strong><cite>贱贱的语言</cite></footer></blockquote><p>于是开始搞了。</p><p>也没多久，一天一夜，搞定了。<br><img src="1.webp" alt="项目打包好的文件"><br>下载的音乐会以歌曲id命名，放在文件目录，支持多文件下载（不是同时）。<br><img src="2.webp" alt="软件界面(丑不？)"><br>看到没，下载完之后支持选择播放，但，凡事就怕但。<br>界面是在太 {丑} 好 {得} 看 {一} 了{批}！</p><p>没办法啊！Python语言没一个好看的UI界面，也可能有，我不会用，比如Pyqt5。<br>害，不多说了，多说无益，放源代码！</p><p><a href="https://github.com/Niko-Karen/my_code/blob/master/Python/%E6%92%AD%E6%94%BE.py">Github文件地址</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter.constants <span class="keyword">import</span> LEFT, RIGHT</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music_play</span>():</span></span><br><span class="line">    <span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">    pygame.mixer.init()</span><br><span class="line">    pygame.mixer.music.load(<span class="built_in">str</span>(<span class="built_in">id</span>) + <span class="string">&#x27;.mp3&#x27;</span>)</span><br><span class="line">    pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_link</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = entry.get()</span><br><span class="line">        lst = text.split(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        str_lst = lst[<span class="number">1</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        link = <span class="string">&#x27;https://music.163.com/song/media/outer/url?id=&#x27;</span> + str_lst</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> <span class="built_in">id</span></span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">str</span>(str_lst)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> link, <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        error_s = <span class="string">&#x27;ERROR:&#x27;</span>, <span class="built_in">str</span>(error)</span><br><span class="line">        entry.delete(<span class="number">0</span>, tkinter.END)</span><br><span class="line">        messagebox.showerror(error_s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_song</span>(<span class="params">link, <span class="built_in">id</span></span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(link, data=data).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;.\\&#x27;</span> + <span class="built_in">id</span> + <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> s:</span><br><span class="line">        s.write(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    result = messagebox.askyesno(title=<span class="string">&#x27;是否播放？&#x27;</span>, message=<span class="string">&#x27;下载完成，是否播放？&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        music_play()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex</span>():</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tkin_canvas</span>():</span></span><br><span class="line">    <span class="keyword">global</span> top</span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">&#x27;网易云音乐下载&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    L1 = tkinter.Label(top, text=<span class="string">&#x27;请输入歌曲网址:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> entry</span><br><span class="line">    entry = tkinter.Entry(top)</span><br><span class="line"></span><br><span class="line">    button = tkinter.Button(top, text=<span class="string">&#x27;下载&#x27;</span>, command=main)</span><br><span class="line">    button_exit = tkinter.Button(top, text=<span class="string">&#x27;退出&#x27;</span>, command=ex)</span><br><span class="line"></span><br><span class="line">    L1.pack(side=LEFT)</span><br><span class="line">    button_exit.pack(side=RIGHT)</span><br><span class="line">    button.pack(side=RIGHT)</span><br><span class="line">    entry.pack(side=RIGHT)</span><br><span class="line"></span><br><span class="line">    top.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;System Starting......&#x27;</span>)</span><br><span class="line">    <span class="built_in">all</span> = get_link()</span><br><span class="line">    link = <span class="built_in">all</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">all</span>[<span class="number">1</span>]</span><br><span class="line">    chose = get_song(link, <span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All Done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tkin_canvas()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也没多少，80多行，轻轻松松。<br>搞完了这个，以后再来个进阶的，不断进步，积极进取！</p>]]></content>
    
    
    <summary type="html">吐槽一句，Tkinter真不好看</summary>
    
    
    
    <category term="Python" scheme="https://niko-karen.github.io/categories/Python/"/>
    
    
    <category term="编程" scheme="https://niko-karen.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>网易云音乐直链</title>
    <link href="https://niko-karen.github.io/article/2118472832/"/>
    <id>https://niko-karen.github.io/article/2118472832/</id>
    <published>2022-01-06T11:05:06.000Z</published>
    <updated>2022-01-07T12:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>网易云音乐有很多方法可以获取直链，但这些方法要么很快失效，要么有缓存时间。</p><p>以下提供的方法简单、快捷并且直到现在依然可用。已经稳定几年了，网易云音乐外链用官方的就好。</p><p>（凡是网易云音乐可以正常试听的均可以直链，因为版权原因或其他原因无法试听的也无法外链。）<br><span id="more"></span><br><img src="https://cdn.jsdelivr.net/gh/2501070055/PIC/usr/uploads/2021/02/2025864149.jpg" alt=""></p><h4 id="标题这里需要用到网易云音乐提供的直链-api："><a href="#标题这里需要用到网易云音乐提供的直链-api：" class="headerlink" title="标题这里需要用到网易云音乐提供的直链 api："></a>标题这里需要用到网易云音乐提供的直链 api：</h4><p><code>https://music.163.com/song/media/outer/url?id=xxx.mp3</code></p><p>这里的 <code>id=xxx.mp3</code> 是根据你需要的歌曲的 ID 进行更改。</p><h4 id="标题例如：歌曲：纵容-Capper"><a href="#标题例如：歌曲：纵容-Capper" class="headerlink" title="标题例如：歌曲：纵容 / Capper"></a>标题例如：歌曲：纵容 / Capper</h4><p><code>https://music.163.com/#/song?id=1819970423</code></p><h4 id="标题修改为："><a href="#标题修改为：" class="headerlink" title="标题修改为："></a>标题修改为：</h4><p><code>https://music.163.com/song/media/outer/url?id=1819970423.mp3</code></p><h4 id="标题-DEMO-演示"><a href="#标题-DEMO-演示" class="headerlink" title="标题 DEMO 演示"></a>标题 DEMO 演示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br><span class="line">&lt;audio controls=&quot;controls&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;/i/song.ogg&quot; type=&quot;audio/ogg&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;https://music.163.com/song/media/outer/url?id=1816006982.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</span><br><span class="line">Your browser does not support the audio element.</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure><!-- CloudCalendar --><div class="widget-wrap" style="width: 90%;margin-left: auto;margin-right: auto; opacity: 0.97;"><div class="widget" id="CloudCalendar"></div></div>]]></content>
    
    
    <summary type="html">网易云音乐直链获取，可以免费下载音乐啦！</summary>
    
    
    
    <category term="技术" scheme="https://niko-karen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="编程" scheme="https://niko-karen.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python Jieba库</title>
    <link href="https://niko-karen.github.io/article/2176063644/"/>
    <id>https://niko-karen.github.io/article/2176063644/</id>
    <published>2022-01-06T05:11:13.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jieba-的江湖地位"><a href="#1-jieba-的江湖地位" class="headerlink" title="1. jieba 的江湖地位"></a><strong>1. jieba 的江湖地位</strong></h2><p>NLP（自然语言）领域现在可谓是群雄纷争，各种开源组件层出不穷，其中一支不可忽视的力量便是 jieba 分词，号称要做最好的 Python 中文分词组件。<br><span id="more"></span><br><img src="https://pic1.zhimg.com/v2-144f02ac2b50ee5841fb2bee3fa36948_r.jpg" alt=""></p><p>“最好的” 这三个字可不是空穴来风，jieba 在开源社区的受欢迎程度非常之高。</p><p>jieba 项目目前的 github star 数已经达到 24k，其他热门分词组件像 HanLP star 数 20k、ansj_seg star 数 5.6k、pkuseg-python star 数 5k。可见 jieba 已经稳居中文分词领域 c 位。</p><p><img src="https://pic4.zhimg.com/v2-a46b69b27e9cdd27460ef7521de90de7_r.jpg" alt=""></p><p>jieba 的主要功能是做中文分词，可以进行简单分词、并行分词、命令行分词，当然它的功能不限于此，目前还支持关键词提取、词性标注、词位置查询等。</p><p>更让人愉悦的是 jieba 虽然立足于 python，但同样支持其他语言和平台，诸如：C++、Go、R、Rust、Node.js、PHP、 iOS、Android 等。所以 jieba 能满足各类开发者的需求。</p><h2 id="2-如何学-jieba"><a href="#2-如何学-jieba" class="headerlink" title="2. 如何学 jieba"></a><strong>2. 如何学 jieba</strong></h2><p>据我所知，jieba 最靠谱的文档是 github 项目的 readme，因为它似乎还没有独立的使用文档。但由于使用起来简单，看 readme 也能快速上手。</p><p><em><a href="https://github.com/fxsjy/jieba">Jieba库的Github地址</a></em></p><p>国内各大博客有关于 jieba 的使用教程，但需要甄别下准确度和时效性，因为 jieba 项目一直在更新。</p><p>当然本文不是纯粹的种草文章，会简单介绍下 jieba 的使用方法。</p><h2 id="3-安装-jieba"><a href="#3-安装-jieba" class="headerlink" title="3. 安装 jieba"></a><strong>3. 安装 jieba</strong></h2><p>jieba 支持<code>pip</code>或者<code>conda</code>安装，直接在命令行执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p>不出意外，应该能很快安装好。</p><p><img src="https://pic2.zhimg.com/v2-154d371fe8a4e1dd06829913b88c04a9_r.jpg" alt=""></p><p>你也可以下载 jieba 安装包再安装，jieba 的 pypi 地址：</p><p><em><a href="http://pypi.python.org/pypi/jieba/">Pypi地址</a></em></p><h2 id="4-分词初体验"><a href="#4-分词初体验" class="headerlink" title="4. 分词初体验"></a><strong>4. 分词初体验</strong></h2><p>分词是 NLP 处理的第一步，也是最基本的任务，分词的好坏直接决定了后面语义分析的精准度。</p><p>所谓分词就是将一段表述里的词汇进行分解，比如 “我爱中国”，分解后有三个词：我、爱、中国，词性分别是名词、动词、名词。</p><p>jieba 库中用于分词的方法有三个：</p><h3 id="jieba-cut"><a href="#jieba-cut" class="headerlink" title="jieba.cut"></a><strong>jieba.cut</strong></h3><p>给定中文字符串，分解后返回一个迭代器，需要用 for 循环访问。</p><p>参数解释：  </p><p><strong>「strs」</strong>： 需要分词的字符串；<br><strong>「cut_all」</strong>：用来控制是否采用全模式；<br><strong>「HMM」</strong>：用来控制是否使用 HMM 模型；<br><strong>「use_paddle」</strong>：用来控制是否使用 paddle 模式下的分词模式，paddle 模式采用延迟加载方式，通过 enable_paddle 接口安装 paddlepaddle-tiny，并且 import 相关代码；  </p><p>这里区分全模式和精确模式，举个例子先看看区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 全模式</span><br><span class="line">seg_list = jieba.cut(&quot;中国上海是一座美丽的国际性大都市&quot;, cut_all=True)</span><br><span class="line">print(&quot;Full Mode: &quot; + &quot;/ &quot;.join(seg_list))  </span><br><span class="line"></span><br><span class="line"># 返回结果</span><br><span class="line">Full Mode: 中国/ 上海/ 是/ 一座/ 美丽/ 的/ 国际/ 国际性/ 大都/ 大都市/ 都市</span><br><span class="line"></span><br><span class="line"># 精确模式</span><br><span class="line">seg_list = jieba.cut(&quot;中国上海是一座美丽的国际性大都市&quot;, cut_all=False)</span><br><span class="line">print(&quot;Full Mode: &quot; + &quot;/ &quot;.join(seg_list))  </span><br><span class="line"></span><br><span class="line"># 返回结果</span><br><span class="line">Default Mode: 中国/ 上海/ 是/ 一座/ 美丽/ 的/ 国际性/ 大都市</span><br></pre></td></tr></table></figure><p>可以看到，全模式把句子中所有的可以成词的词语都扫描出来, 会出现一词多用、一词多意。精确模式将句子最精确的切分开，每个词都只有一种含义。</p><p><code>jieba.cut</code>方法默认是精确模式。</p><p>还有一个参数控制 paddle 模式，会更加精确，使用这个的前提是你需要先安装 paddlepaddle-tiny。  </p><p>安装命令：<br><code>pip install paddlepaddle-tiny==1.6.1</code></p><p>详情可以去官网看下，这里不举例。</p><h3 id="jieba-cut-for-search"><a href="#jieba-cut-for-search" class="headerlink" title="jieba.cut_for_search"></a><strong>jieba.cut_for_search</strong></h3><p>该方法和 cut 一样，分解后返回一个迭代器，需要用 for 循环访问。不过它是搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</p><p>参数解释：</p><p><strong>「strs」</strong>：需要分词的字符串；<br><strong>「HMM」</strong>：是否使用 HMM 模型，默认值为 True。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索引擎模式</span><br><span class="line">seg_list = jieba.cut_for_search(&quot;中国上海是一座美丽的国际性大都市，拥有复旦大学、上海交通大学等知名高等学府&quot;)  </span><br><span class="line">print(&quot;, &quot;.join(seg_list))</span><br><span class="line"></span><br><span class="line"># 返回结果</span><br><span class="line">Search Mode: 中国, 上海, 是, 一座, 美丽, 的, 国际, 国际性, 大都, 都市, 大都市, ，, 拥有, 复旦, 大学, 复旦大学, 、, 上海, 交通, 大学, 上海交通大学, 等, 知名, 高等, 学府, 高等学府</span><br></pre></td></tr></table></figure><h3 id="jieba-lcut"><a href="#jieba-lcut" class="headerlink" title="jieba.lcut"></a><strong>jieba.lcut</strong></h3><p>和<code>jieba.cut</code>使用方法一样，不过返回的是列表。</p><p>cut 和 cut_for_search 方法都是支持繁体字的。</p><h2 id="5-添加自定义词典"><a href="#5-添加自定义词典" class="headerlink" title="5. 添加自定义词典"></a><strong>5. 添加自定义词典</strong></h2><p>如果是对专业新闻或者小说进行分词，会有很多的新词汇，jieba 库里没有就没办法识别，那么就需要添加自定义的词汇，比如：奥利给。</p><p>添加自定义词汇的方法： <code>jieba.load_userdict(file_name)</code> 参数是文本文件，txt、csv 都可以。</p><p>自定义词典文件的词汇格式是一个词占一行，每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。 比如：</p><p><img src="https://pic3.zhimg.com/v2-006e9b57a6f284ddce4f14314b8caa7a_b.jpg" alt=""></p><p>以 “奥利给，管虎执导的八佰是一部让人热血沸腾的好电影。” 这段话为例， 如果不添加自定义词典，很多词没办法识别出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 不添加自定义词典</span><br><span class="line">seg_list = jieba.cut(&quot;奥利给，管虎执导的八佰是一部让人热血沸腾的好电影&quot;)</span><br><span class="line">print(&quot;/ &quot;.join(seg_list))  </span><br><span class="line"></span><br><span class="line"># 返回结果</span><br><span class="line">奥利/ 给/ ，/ 管虎/ 执导/ 的/ 八佰是/ 一部/ 让/ 人/ 热血沸腾/ 的/ 好/ 电影</span><br></pre></td></tr></table></figure><p>添加自定义词典后，新词、人名、电影名都可以识别出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 载入词典</span><br><span class="line">jieba.load_userdict(&quot;dict.txt&quot;)</span><br><span class="line">seg_list = jieba.cut(&quot;奥利给，管虎执导的八佰是一部让人热血沸腾的好电影&quot;)</span><br><span class="line">print(&quot;/ &quot;.join(seg_list))  </span><br><span class="line"></span><br><span class="line"># 返回结果</span><br><span class="line">奥利给/ ，/ 管虎/ 执导/ 的/ 八佰/ 是/ 一部/ 让/ 人/ 热血沸腾/ 的/ 好/ 电影</span><br></pre></td></tr></table></figure><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a><strong>6. 结论</strong></h2><p>jieba 无疑是一款优秀的分词工具，而且在不断地优化成长。前面讲了一些基本的使用，大家还可以尝试使用停用词、提取关键词、词性标注、词位置查询等功能，也是十分的便捷。</p>]]></content>
    
    
    <summary type="html">介绍Jieba扩展库</summary>
    
    
    
    <category term="Python" scheme="https://niko-karen.github.io/categories/Python/"/>
    
    
    <category term="编程" scheme="https://niko-karen.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>散学以后</title>
    <link href="https://niko-karen.github.io/article/400548830/"/>
    <id>https://niko-karen.github.io/article/400548830/</id>
    <published>2022-01-06T04:23:55.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>花费一学期的时间，学习的知识，在两天内用尽心血在一张试卷上呈现，说起来有点夸张，但确是这样。</p><p>在2022年1月6日，我们数学考试结束后，全班都仿佛一锅烧开的热水，沸腾了。</p><p>听到那一声悦耳放学铃，我冲出教室，“畏罪潜逃”。冲进了学校附近的Mixue Ice Cream。</p><p>喝着新鲜的柠檬水，看着书，好不痛快。<br>过了一会，几乎全班人都到了。<br>全是人。好挤。😑<br>有什么办法？忍吧。忍忍就过去了。</p>]]></content>
    
    
    <summary type="html">散学后的感悟</summary>
    
    
    
    <category term="日记" scheme="https://niko-karen.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="感悟" scheme="https://niko-karen.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>博客公告</title>
    <link href="https://niko-karen.github.io/article/744616242/"/>
    <id>https://niko-karen.github.io/article/744616242/</id>
    <published>2022-01-02T11:43:28.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1867217766&auto=1&height=66"></iframe><h1 id="Updated-Blog-at-2022-1-14-21-41"><a href="#Updated-Blog-at-2022-1-14-21-41" class="headerlink" title="Updated Blog at 2022/1/14 21:41"></a>Updated Blog at 2022/1/14 21:41</h1><p>本次更新更换了网站主题，由<strong>Next</strong>转为<strong>Butterfly</strong><br><a class="btn-beautify button--animated blue larger" href="https://gitee.com/immyw/hexo-theme-butterfly"   title="Butterfly主题Gitee地址"><i class="far fa-hand-point-right"></i><span>Butterfly主题Gitee地址</span></a></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ol><li>优化博客访问速度，减少插件使用，尽量轻度搭建。</li><li>添加Live2d-Widget升级互动版看板娘(不是插件!)，美化一下嘛~</li></ol><p><img src="n.webp" alt="看板娘"></p><ol><li>添加吸底Aplayer音乐播放器，歌单为网易云歌单 ‘清华自习室 / 学习处方’ ，持续跟进。</li></ol><p><img src="a.webp" alt="Aplayer"></p><ol><li>添加双评论系统,<strong>Gitalk</strong>和<strong>Twikoo</strong> </li></ol><p><img src="desktop.webp" alt="Twikoo"></p><ol><li>添加在线聊天系统<mark class="hl-label blue">TiDio</mark> ，恶搞翻译。</li></ol><p><img src="gan.webp" alt="TiDio"></p><h2 id="各个页面展示"><a href="#各个页面展示" class="headerlink" title="各个页面展示"></a>各个页面展示</h2><div class="justified-gallery"><p><img src="jie.webp" alt="主页"><br><img src="ye.webp" alt="友链页"><br><img src="l.webp" alt="相册(图床)"></p>          </div><h3 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h3><a class="btn-beautify button--animated orange larger" href="https://niko-karen.gtihub.io"   title="我的博客"><i class="far fa-hand-point-right"></i><span>我的博客</span></a>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1867</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一日奇遇</title>
    <link href="https://niko-karen.github.io/article/c0d23e63/"/>
    <id>https://niko-karen.github.io/article/c0d23e63/</id>
    <published>2021-11-14T08:20:22.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note red icon simple"><i class="note-icon fas fa-exclamation-circle"></i><p>这篇文章是初建博客时写的，文笔稚嫩，还没写完，吾会尽力完成。<br>另外，文中的图书馆现在已经成为旧图书馆。</p></div><p>前文P.S : 这篇文章巨多灾难，第一次被覆盖，第二次被删除。难受 :(</p><p>在星期六的一个万里乌云、阳光明媚、晴空万里的日子里，本该安安稳稳地在家辛苦码字，但<code>学习</code>的欲望提醒了我。经过一番认真的整理后，我踏上了<del>战场</del>。</p><p><img src="j.webp" alt="旧图书馆"></p><p>到达图书馆，但又未完全到达。因为疫情还很严重，我还需经过层层关卡、过五关斩六将，才能真正<del>救出公主</del>进入内，更何况现在是假日，有很多人和我们一样，也在排队扫码。<br>十分钟后，我扫完码入内后，首先冲的是少儿馆，<psw>其实我是去看成人馆，</psw>先进去还书。走进去之前，还要登记信息，那我就上吧……<br>“我要<psw>强奸</psw>你!”一个女声，对另一个女生说。这可把我吓得……咋俩女的还说这话，心脏病都要出来了。</p>]]></content>
    
    
    <summary type="html">2021-11-14 晴朗</summary>
    
    
    
    <category term="日记" scheme="https://niko-karen.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://niko-karen.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>思</title>
    <link href="https://niko-karen.github.io/article/40513/"/>
    <id>https://niko-karen.github.io/article/40513/</id>
    <published>2021-11-12T10:09:42.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>​    今天我放学回家时看到了许多令我个人感受良深的事物</p><p>​    可能因为我是个男生，许多人认为我不在意这些花花草草，实际上我表面上是这样，但……</p><p>​    我很关心那些可怜的事物。</p><span id="more"></span><hr><h2 id="2-事例"><a href="#2-事例" class="headerlink" title="2.事例"></a>2.事例</h2><p>​        (1)  每次家里来了爷爷奶奶养的鸡或鸭时，我都格外在意它们，甚至夜深人静时都去看它们，生怕它们哪天被**了。在这不久前，就来了一只鸡和鸭，它们都只存在了两天，在我去上课一段时间内，它们已成为了桌上菜。我心有余悸，在那次，我掩藏了十二年的心性被知道了，自那以后，我爸妈都知道了我不是冷血动物。</p><p>​        (2)  在某一年的暑假期间，我去了一趟北京，在逛街时，我看到了一位双腿截肢的老婆婆，她匍匐在推车上，用一块木板写上了向人乞讨的话语，但是没有一个人愿意施舍几枚硬币让她吃顿饱饭，仅仅只是将它看成了一位无用的过路人，冷眼旁观。只有我一个人一直看着她，看着她缓慢地，艰难地用手推着车走。我没有能力帮助她，我也没有胆量向其他人请求、向父母请求几元钱帮助她。我先天懦弱，很好强，无法在他人面前露出本性。</p><p>​        (3)  在今天，我看到了一只全身黑毛的流浪猫，我望着它，它也望着我，我俩对视了一分钟，后来，我实在忍受不了，疾步跑回了家，在我的密码日记本上，写上了一句话，并牢记在心，永远。</p><p><img src="n.webp" style="zoom:80%;" /></p><hr><h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3.最后"></a>3.最后</h2><p>​    最终到了六年级时，我才不那么懦弱、无能，也能释放心中的压力了。</p><p>​    这是我第一次将这些事公之于众，同时也释放了在心中压了十二年的大石，得以释然。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;​    今天我放学回家时看到了许多令我个人感受良深的事物&lt;/p&gt;
&lt;p&gt;​    可能因为我是个男生，许多人认为我不在意这些花花草草，实际上我表面上是这样，但……&lt;/p&gt;
&lt;p&gt;​    我很关心那些可怜的事物。&lt;/p&gt;</summary>
    
    
    
    <category term="感悟" scheme="https://niko-karen.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="感悟" scheme="https://niko-karen.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>我的旅行日记</title>
    <link href="https://niko-karen.github.io/article/383940238/"/>
    <id>https://niko-karen.github.io/article/383940238/</id>
    <published>2021-10-02T12:50:43.000Z</published>
    <updated>2022-01-07T01:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="增城一行"><a href="#增城一行" class="headerlink" title="增城一行"></a><strong>增城一行</strong></h1><p>就在昨天,我们到了我的外婆家——-增城.</p><p>那是一个美丽的地方,但总有些美中不足.</p><span id="more"></span><p><img src="zeng.webp" alt=""></p><h2 id="Bad-Side"><a href="#Bad-Side" class="headerlink" title="Bad Side"></a>Bad Side</h2><ol><li>到处乱装修.</li></ol><p>为什么这样说? 主要还是因为附近总有新房子,别墅当初都是,导致房地产中介赚的盆满钵满。</p><ol><li>过于现代</li></ol><p>嗯? 现代不好吗? 并不是这么说,而只是我不太喜欢过于喧闹的生活，我更喜欢诗歌中的那种隐居生活，这也像我的性格:不太爱说话。</p><h2 id="Good-Side"><a href="#Good-Side" class="headerlink" title="Good Side"></a>Good Side</h2><ol><li>足够方便,便利</li></ol><p>嗯.这确实是增城的优点,也是增城的优势。<br>因为现代所以便利。因为便利所以繁荣。</p><ol><li>美丽</li></ol><p>就像图片那样，我也见到了这花木繁茂、蓝天白云的增城，这是足以让人心神向往的，如果只是这张图片，还不足以表现增城的美。当然，以我那差得不得了的写作水平描写不出，大家可以自己去看看。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;增城一行&quot;&gt;&lt;a href=&quot;#增城一行&quot; class=&quot;headerlink&quot; title=&quot;增城一行&quot;&gt;&lt;/a&gt;&lt;strong&gt;增城一行&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;就在昨天,我们到了我的外婆家——-增城.&lt;/p&gt;
&lt;p&gt;那是一个美丽的地方,但总有些美中不足.&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://niko-karen.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="旅行" scheme="https://niko-karen.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
</feed>
